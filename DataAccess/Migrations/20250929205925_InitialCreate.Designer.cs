// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PetShopDbContext))]
    [Migration("20250929205925_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Cliente", b =>
                {
                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Dni")
                        .HasColumnType("int")
                        .HasColumnName("DNI");

                    b.Property<int>("IdTipoCliente")
                        .HasColumnType("int");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdTipoCliente");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Encargado", b =>
                {
                    b.Property<Guid>("IdEncargado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Dni")
                        .HasColumnType("int")
                        .HasColumnName("DNI");

                    b.Property<string>("NombreEncargado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdEncargado");

                    b.ToTable("Encargado", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EncargadoSucursal", b =>
                {
                    b.Property<Guid>("IdEncargadoSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdEncargado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdEncargadoSucursal");

                    b.HasIndex("IdEncargado");

                    b.HasIndex("IdSucursal");

                    b.ToTable("EncargadoSucursal", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstadoIsenum", b =>
                {
                    b.Property<int>("IdEstadoIs")
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoIS");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstadoIs")
                        .HasName("PK__EstadoIS__A40E4169897FF9CD");

                    b.ToTable("EstadoISEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstadoOcenum", b =>
                {
                    b.Property<int>("IdEstadoOc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoOC");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoOc"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstadoOc")
                        .HasName("PK__EstadoOC__A40E91BCFA3EF346");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_EstadoOCEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("EstadoOCEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstadoOpenum", b =>
                {
                    b.Property<int>("IdEstadoOp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoOP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoOp"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstadoOp")
                        .HasName("PK__EstadoOP__A40E91B12C96C4A8");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_EstadoOPEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("EstadoOPEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstadoSpenum", b =>
                {
                    b.Property<int>("IdEstadoSp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoSP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoSp"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstadoSp")
                        .HasName("PK__EstadoSP__A402BE324F608734");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_EstadoSPEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("EstadoSPEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstadoStockEnum", b =>
                {
                    b.Property<int>("IdEstadoStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoStock"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdEstadoStock")
                        .HasName("PK__EstadoSt__A9968E1F1F8B29BD");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_EstadoStockEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("EstadoStockEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstadoStpenum", b =>
                {
                    b.Property<int>("IdEstadoStp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoSTP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoStp"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstadoStp")
                        .HasName("PK__EstadoST__1B48908BBDFE491C");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_EstadoSTPEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("EstadoSTPEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDeCompra", b =>
                {
                    b.Property<Guid>("IdOrdenDeCompra")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaOc")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaOC");

                    b.Property<int>("IdEstadoOc")
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoOC");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("IdOrdenDeCompra");

                    b.HasIndex("IdEstadoOc");

                    b.ToTable("OrdenDeCompra", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDeCompraDetalle", b =>
                {
                    b.Property<Guid>("IdOrdenDeCompraDetalle")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdOrdenDeCompra")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PesoNeto")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdOrdenDeCompraDetalle");

                    b.HasIndex("IdOrdenDeCompra");

                    b.ToTable("OrdenDeCompraDetalle", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDePedido", b =>
                {
                    b.Property<Guid>("IdOrdenDePedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaOp")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaOP");

                    b.Property<int>("IdEstadoOp")
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoOP");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("IdOrdenDePedido");

                    b.HasIndex("IdEstadoOp");

                    b.ToTable("OrdenDePedido", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDePedidoDetalle", b =>
                {
                    b.Property<Guid>("IdOrdenDePedidoDetalle")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdOrdenDePedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PesoNeto")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdOrdenDePedidoDetalle");

                    b.HasIndex("IdOrdenDePedido");

                    b.ToTable("OrdenDePedidoDetalle", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Producto", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("PesoNeto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("PrecioNeto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Unidad")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdProducto");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Proveedor", b =>
                {
                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cuit")
                        .HasColumnType("int")
                        .HasColumnName("CUIT");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdProveedor");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ProveedorProducto", b =>
                {
                    b.Property<Guid>("IdProveedorProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProveedorProducto");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdProveedor");

                    b.ToTable("ProveedorProducto", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDePedido", b =>
                {
                    b.Property<Guid>("IdSolicitudDePedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaSp")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaSP");

                    b.Property<int>("IdEstadoSp")
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoSP");

                    b.HasKey("IdSolicitudDePedido");

                    b.HasIndex("IdEstadoSp");

                    b.ToTable("SolicitudDePedido", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDePedidoDetalle", b =>
                {
                    b.Property<Guid>("IdSolicitudDePedidoDetalle")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSolicitudDePedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PesoNeto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdSolicitudDePedidoDetalle");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdSolicitudDePedido");

                    b.ToTable("SolicitudDePedidoDetalle", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDeTraspasoDeProducto", b =>
                {
                    b.Property<Guid>("IdSolicitudDeTraspasoDeProductos")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaStp")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaSTP");

                    b.Property<int>("IdEstadoStp")
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoSTP");

                    b.HasKey("IdSolicitudDeTraspasoDeProductos");

                    b.HasIndex("IdEstadoStp");

                    b.ToTable("SolicitudDeTraspasoDeProductos");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDeTraspasoDeProductosDetalle", b =>
                {
                    b.Property<Guid>("IdSolicitudDeTraspasoDeProductosDetalle")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSolicitudDeTraspasoDeProductos")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PesoNeto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdSolicitudDeTraspasoDeProductosDetalle");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdSolicitudDeTraspasoDeProductos");

                    b.ToTable("SolicitudDeTraspasoDeProductosDetalle", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.StockPorSucursal", b =>
                {
                    b.Property<Guid>("IdStockSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EstadoStockEnumIdEstadoStock")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoStock")
                        .HasColumnType("int");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoIdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StockActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StockDeseado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("SucursalIdSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdStockSucursal");

                    b.HasIndex("EstadoStockEnumIdEstadoStock");

                    b.HasIndex("IdEstadoStock");

                    b.HasIndex("IdSucursal");

                    b.HasIndex("ProductoIdProducto");

                    b.HasIndex("SucursalIdSucursal");

                    b.HasIndex("IdProducto", "IdSucursal")
                        .IsUnique();

                    b.ToTable("StockPorSucursal", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Sucursal", b =>
                {
                    b.Property<Guid>("IdSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdTipoSucursal")
                        .HasColumnType("int");

                    b.Property<string>("NombreSucursal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdSucursal");

                    b.HasIndex("IdTipoSucursal");

                    b.ToTable("Sucursal", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.TipoClienteEnum", b =>
                {
                    b.Property<int>("IdTipoCliente")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTipoCliente")
                        .HasName("PK__TipoClie__F173C7FAD0E202C9");

                    b.ToTable("TipoClienteEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.TipoSucursalEnum", b =>
                {
                    b.Property<int>("IdTipoSucursal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoSucursal"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTipoSucursal")
                        .HasName("PK__TipoSucu__66F50EDB86DD0D64");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_TipoSucursalEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("TipoSucursalEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.TipoVentaEnum", b =>
                {
                    b.Property<int>("IdTipoVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoVenta"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTipoVenta")
                        .HasName("PK__TipoVent__191D80C0599BD2F7");

                    b.HasIndex(new[] { "Descripcion" }, "UQ_TipoVentaEnum_Descripcion")
                        .IsUnique();

                    b.ToTable("TipoVentaEnum", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.VentaDetalle", b =>
                {
                    b.Property<Guid>("IdVentaDetalle")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClienteIdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdVenta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PesoNeto")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid?>("ProductoIdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdVentaDetalle");

                    b.HasIndex("ClienteIdCliente");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdVenta");

                    b.HasIndex("ProductoIdProducto");

                    b.ToTable("VentaDetalle", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Ventum", b =>
                {
                    b.Property<Guid>("IdVenta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime");

                    b.Property<int>("IdTipoVenta")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVenta")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("IdVenta");

                    b.HasIndex("IdTipoVenta");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("DataAccess.Models.Cliente", b =>
                {
                    b.HasOne("DataAccess.Models.TipoClienteEnum", "IdTipoClienteNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdTipoCliente")
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_TipoClienteEnum");

                    b.Navigation("IdTipoClienteNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.EncargadoSucursal", b =>
                {
                    b.HasOne("DataAccess.Models.Encargado", "IdEncargadoNavigation")
                        .WithMany("EncargadoSucursals")
                        .HasForeignKey("IdEncargado")
                        .IsRequired()
                        .HasConstraintName("FK_EncargadoSucursal_Encargado");

                    b.HasOne("DataAccess.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany("EncargadoSucursals")
                        .HasForeignKey("IdSucursal")
                        .IsRequired()
                        .HasConstraintName("FK_EncargadoSucursal_Sucursal");

                    b.Navigation("IdEncargadoNavigation");

                    b.Navigation("IdSucursalNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDeCompra", b =>
                {
                    b.HasOne("DataAccess.Models.EstadoOcenum", "IdEstadoOcNavigation")
                        .WithMany("OrdenDeCompras")
                        .HasForeignKey("IdEstadoOc")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenDeCompra_EstadoOCEnum");

                    b.Navigation("IdEstadoOcNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDeCompraDetalle", b =>
                {
                    b.HasOne("DataAccess.Models.OrdenDeCompra", "IdOrdenDeCompraNavigation")
                        .WithMany("OrdenDeCompraDetalles")
                        .HasForeignKey("IdOrdenDeCompra")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenDeCompraDetalle_OrdenDeCompra");

                    b.Navigation("IdOrdenDeCompraNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDePedido", b =>
                {
                    b.HasOne("DataAccess.Models.EstadoOpenum", "IdEstadoOpNavigation")
                        .WithMany("OrdenDePedidos")
                        .HasForeignKey("IdEstadoOp")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenDePedido_EstadoOPEnum");

                    b.Navigation("IdEstadoOpNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDePedidoDetalle", b =>
                {
                    b.HasOne("DataAccess.Models.OrdenDePedido", "IdOrdenDePedidoNavigation")
                        .WithMany("OrdenDePedidoDetalles")
                        .HasForeignKey("IdOrdenDePedido")
                        .IsRequired()
                        .HasConstraintName("FK_OrdenDePedidoDetalle_OrdenDePedido");

                    b.Navigation("IdOrdenDePedidoNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.ProveedorProducto", b =>
                {
                    b.HasOne("DataAccess.Models.Producto", "IdProductoNavigation")
                        .WithMany("ProveedorProductos")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_ProveedorProducto_Producto");

                    b.HasOne("DataAccess.Models.Proveedor", "IdProveedorNavigation")
                        .WithMany("ProveedorProductos")
                        .HasForeignKey("IdProveedor")
                        .IsRequired()
                        .HasConstraintName("FK_ProveedorProducto_Proveedor");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDePedido", b =>
                {
                    b.HasOne("DataAccess.Models.EstadoSpenum", "IdEstadoSpNavigation")
                        .WithMany("SolicitudDePedidos")
                        .HasForeignKey("IdEstadoSp")
                        .IsRequired()
                        .HasConstraintName("FK_SolicitudDePedido_EstadoSPEnum");

                    b.Navigation("IdEstadoSpNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDePedidoDetalle", b =>
                {
                    b.HasOne("DataAccess.Models.Producto", "IdProductoNavigation")
                        .WithMany("SolicitudDePedidoDetalles")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_SolicitudDePedidoDetalle_Producto");

                    b.HasOne("DataAccess.Models.SolicitudDePedido", "IdSolicitudDePedidoNavigation")
                        .WithMany("SolicitudDePedidoDetalles")
                        .HasForeignKey("IdSolicitudDePedido")
                        .IsRequired()
                        .HasConstraintName("FK_SolicitudDePedidoDetalle_SolicitudDePedido");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdSolicitudDePedidoNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDeTraspasoDeProducto", b =>
                {
                    b.HasOne("DataAccess.Models.EstadoStpenum", "IdEstadoStpNavigation")
                        .WithMany("SolicitudDeTraspasoDeProductos")
                        .HasForeignKey("IdEstadoStp")
                        .IsRequired()
                        .HasConstraintName("FK_SolicitudDeTraspasoDeProductos_EstadoSTPEnum");

                    b.Navigation("IdEstadoStpNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDeTraspasoDeProductosDetalle", b =>
                {
                    b.HasOne("DataAccess.Models.Producto", "IdProductoNavigation")
                        .WithMany("SolicitudDeTraspasoDeProductosDetalles")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_SolicitudDeTraspasoDeProductosDetalle_Producto");

                    b.HasOne("DataAccess.Models.SolicitudDeTraspasoDeProducto", "IdSolicitudDeTraspasoDeProductosNavigation")
                        .WithMany("SolicitudDeTraspasoDeProductosDetalles")
                        .HasForeignKey("IdSolicitudDeTraspasoDeProductos")
                        .IsRequired()
                        .HasConstraintName("FK_SolicitudDeTraspasoDeProductosDetalle_SolicitudDeTraspasoDeProductos");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdSolicitudDeTraspasoDeProductosNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.StockPorSucursal", b =>
                {
                    b.HasOne("DataAccess.Models.EstadoStockEnum", null)
                        .WithMany("StockPorSucursals")
                        .HasForeignKey("EstadoStockEnumIdEstadoStock");

                    b.HasOne("DataAccess.Models.EstadoStockEnum", "IdEstadoStockNavigation")
                        .WithMany()
                        .HasForeignKey("IdEstadoStock")
                        .IsRequired()
                        .HasConstraintName("FK_StockSucursal_EstadoStock");

                    b.HasOne("DataAccess.Models.Producto", "IdProductoNavigation")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_StockSucursal_Producto");

                    b.HasOne("DataAccess.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany()
                        .HasForeignKey("IdSucursal")
                        .IsRequired()
                        .HasConstraintName("FK_StockSucursal_Sucursal");

                    b.HasOne("DataAccess.Models.Producto", null)
                        .WithMany("StockPorSucursals")
                        .HasForeignKey("ProductoIdProducto");

                    b.HasOne("DataAccess.Models.Sucursal", null)
                        .WithMany("StockPorSucursals")
                        .HasForeignKey("SucursalIdSucursal");

                    b.Navigation("IdEstadoStockNavigation");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdSucursalNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.Sucursal", b =>
                {
                    b.HasOne("DataAccess.Models.TipoSucursalEnum", "IdTipoSucursalNavigation")
                        .WithMany("Sucursals")
                        .HasForeignKey("IdTipoSucursal")
                        .IsRequired()
                        .HasConstraintName("FK_Sucursal_TipoSucursalEnum");

                    b.Navigation("IdTipoSucursalNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.VentaDetalle", b =>
                {
                    b.HasOne("DataAccess.Models.Cliente", null)
                        .WithMany("VentaDetalles")
                        .HasForeignKey("ClienteIdCliente");

                    b.HasOne("DataAccess.Models.Producto", "IdProductoNavigation")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("FK_VentaDetalle_Producto");

                    b.HasOne("DataAccess.Models.Ventum", "IdVentaNavigation")
                        .WithMany("VentaDetalles")
                        .HasForeignKey("IdVenta")
                        .IsRequired()
                        .HasConstraintName("FK_VentaDetalle_Venta");

                    b.HasOne("DataAccess.Models.Producto", null)
                        .WithMany("VentaDetalle")
                        .HasForeignKey("ProductoIdProducto");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.Ventum", b =>
                {
                    b.HasOne("DataAccess.Models.TipoVentaEnum", "IdTipoVentaNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdTipoVenta")
                        .IsRequired()
                        .HasConstraintName("FK_Venta_TipoVentaEnum");

                    b.Navigation("IdTipoVentaNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.Cliente", b =>
                {
                    b.Navigation("VentaDetalles");
                });

            modelBuilder.Entity("DataAccess.Models.Encargado", b =>
                {
                    b.Navigation("EncargadoSucursals");
                });

            modelBuilder.Entity("DataAccess.Models.EstadoOcenum", b =>
                {
                    b.Navigation("OrdenDeCompras");
                });

            modelBuilder.Entity("DataAccess.Models.EstadoOpenum", b =>
                {
                    b.Navigation("OrdenDePedidos");
                });

            modelBuilder.Entity("DataAccess.Models.EstadoSpenum", b =>
                {
                    b.Navigation("SolicitudDePedidos");
                });

            modelBuilder.Entity("DataAccess.Models.EstadoStockEnum", b =>
                {
                    b.Navigation("StockPorSucursals");
                });

            modelBuilder.Entity("DataAccess.Models.EstadoStpenum", b =>
                {
                    b.Navigation("SolicitudDeTraspasoDeProductos");
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDeCompra", b =>
                {
                    b.Navigation("OrdenDeCompraDetalles");
                });

            modelBuilder.Entity("DataAccess.Models.OrdenDePedido", b =>
                {
                    b.Navigation("OrdenDePedidoDetalles");
                });

            modelBuilder.Entity("DataAccess.Models.Producto", b =>
                {
                    b.Navigation("ProveedorProductos");

                    b.Navigation("SolicitudDePedidoDetalles");

                    b.Navigation("SolicitudDeTraspasoDeProductosDetalles");

                    b.Navigation("StockPorSucursals");

                    b.Navigation("VentaDetalle");
                });

            modelBuilder.Entity("DataAccess.Models.Proveedor", b =>
                {
                    b.Navigation("ProveedorProductos");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDePedido", b =>
                {
                    b.Navigation("SolicitudDePedidoDetalles");
                });

            modelBuilder.Entity("DataAccess.Models.SolicitudDeTraspasoDeProducto", b =>
                {
                    b.Navigation("SolicitudDeTraspasoDeProductosDetalles");
                });

            modelBuilder.Entity("DataAccess.Models.Sucursal", b =>
                {
                    b.Navigation("EncargadoSucursals");

                    b.Navigation("StockPorSucursals");
                });

            modelBuilder.Entity("DataAccess.Models.TipoClienteEnum", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("DataAccess.Models.TipoSucursalEnum", b =>
                {
                    b.Navigation("Sucursals");
                });

            modelBuilder.Entity("DataAccess.Models.TipoVentaEnum", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("DataAccess.Models.Ventum", b =>
                {
                    b.Navigation("VentaDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
